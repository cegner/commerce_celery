<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_celery_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_celery'] = array(
    'title' => t('Celery payment'),
    'description' => t('Payment through Celery API'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_celery_settings_form($settings = NULL) {
  $form = array();

  $form['celery_api_access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Celery API Access Token'),
    '#description' => t('This can be found on your Celery Account settings page.'),
    '#default_value' => $settings['celery_api_access_token'],
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_celery_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $fields = array(
    'code' => '',
  );

  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_celery_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Validate the credit card fields.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  // Even though a form error triggered by the validate handler would be enough
  // to stop the submission of the form, it's not enough to stop it from a
  // Commerce standpoint because of the combined validation / submission going
  // on per-pane in the checkout form. Thus even with a call to form_set_error()
  // this validate handler must still return FALSE.
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_celery_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Just as an example, we might store information in the order object from the
  // payment parameters, though we would never save a full credit card number,
  // even in examples!

  $line_items = $order->commerce_line_items[LANGUAGE_NONE];
  $products = array();
  $shipping_amount = 0;

  foreach ($line_items as $line_item) {
    $item = commerce_line_item_load($line_item['line_item_id']);

    if ($item->type == "product") {
      $product = commerce_product_load($item->commerce_product[LANGUAGE_NONE][0]['product_id']);
      $products[] = array('slug' => $product->sku, 'quantity' => $item->quantity);
    }
    elseif ($item->type == "shipping") {
      $shipping_amount += $item->commerce_total[LANGUAGE_NONE][0]['amount'];
    }
  }

  $billing = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  $shipping = commerce_customer_profile_load($order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id']);

  // Build a big array of all the order info to send to Celery API
  $data = array(
    'order' => array(
      'seller_id' => _commerce_celery_get_seller_id($payment_method),
      'buyer' => array(
        'email' => $billing->field_email[LANGUAGE_NONE][0]['email'], 
        'name' => $billing->commerce_customer_address[LANGUAGE_NONE][0]['name_line'],
        'address' => array(
          'street' => $shipping->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'],
          'city' => $shipping->commerce_customer_address[LANGUAGE_NONE][0]['locality'],
          'state' => $shipping->commerce_customer_address[LANGUAGE_NONE][0]['administrative_area'],
          'zip' => $shipping->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'],
          'country' => $shipping->commerce_customer_address[LANGUAGE_NONE][0]['country'],
        ),
        'billing' => array(
          'street' => $billing->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'],
          'city' => $billing->commerce_customer_address[LANGUAGE_NONE][0]['locality'],
          'state' => $billing->commerce_customer_address[LANGUAGE_NONE][0]['administrative_area'],
          'zip' => $billing->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'],
          'country' => $billing->commerce_customer_address[LANGUAGE_NONE][0]['country'],
        )
      ),
      'products' => $products, 
      'payment' => array(
        'card_number' => $pane_values['credit_card']['number'],
        'card_exp_month' => $pane_values['credit_card']['exp_month'],
        'card_exp_year' => $pane_values['credit_card']['exp_year'],
        'card_cvc' => $pane_values['credit_card']['code'] 
      ),
      'shipping' => $shipping_amount
    ),
  );
  $data_string = json_encode($data);

  $ch = curl_init('https://api.trycelery.com/v1/checkout');
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Content-Type: application/json',
    'Content-Length: ' . strlen($data_string))
  );
  $result = curl_exec($ch);

  $result_arr = json_decode($result);

  if (isset($result_arr->order)) {
    drupal_set_message("Success!");

    // Store Order info in Drupal Commerce order system too
    // Make sure to obscure credit card number
    $number = $pane_values['credit_card']['number'];
    $pane_values['credit_card']['number'] = substr($number, 0, 4) . str_repeat('-', strlen($number) - 8) . substr($number, -4);
    $order->data['commerce_celery'] = $pane_values;

    commerce_celery_transaction($payment_method, $order, $charge);
  }
  else {
    $error_arr = json_decode($result_arr->error);
    if ($error_arr->data){
      drupal_set_message($error_arr->data, 'error');
    }
    else {
      drupal_set_message($result_arr->error, 'error');
    }
    
    drupal_goto("checkout/$order->order_number/review");
  }
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_celery_transaction($payment_method, $order, $charge) {

  $card_details = $order->data['commerce_celery']['credit_card'];

  $transaction = commerce_payment_transaction_new('commerce_celery', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  $transaction->message = 'Number: @number<br/>Expiration: @month/@year';
  $transaction->message_variables = array(
    '@number' => $card_details['number'],
    '@month' => $card_details['exp_month'],
    '@year' => $card_details['exp_year'],
  );

  commerce_payment_transaction_save($transaction);
}

/**
 * Gets Seller ID from the Celery API using the provided Access Token
 */
function _commerce_celery_get_seller_id($payment_method) {
  if ($seller_id = variable_get('celery_seller_id')) {
    return $seller_id;
  }
  else {
    $access_token = $payment_method['settings']['celery_api_access_token'];
    $request = drupal_http_request("https://api.trycelery.com/v1/users/me?access_token=$access_token");

    if ($request->code == 200) {
      $data = json_decode($request->data);
      variable_set('celery_seller_id', $data->data->id);
      return $request->data;
    }
    else {
      drupal_set_message($request->error, 'error');
    }
  }
}
